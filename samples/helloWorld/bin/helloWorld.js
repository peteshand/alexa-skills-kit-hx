// Generated by Haxe 3.3.0
if (process.version < "v4.0.0") console.warn("Module " + (typeof(module) == "undefined" ? "" : module.filename) + " requires node.js version 4.0.0 or higher");
(function () { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var alexa_tasks_Tasks = function() {
	this.items = [];
};
alexa_tasks_Tasks.prototype = {
	add: function(task) {
		console.log("task.index = " + task.index);
		this.items.push(task);
	}
};
var alexa_process_Processes = function() {
	this.items = new haxe_ds_StringMap();
};
alexa_process_Processes.prototype = {
	add: function(intent,process) {
		var _this = this.items;
		if(__map_reserved[intent] != null) {
			_this.setReserved(intent,process);
		} else {
			_this.h[intent] = process;
		}
	}
	,execute: function(task) {
		var data = JSON.parse(task.data);
		if(data.request.intent != null) {
			var _this = this.items;
			var key = data.request.intent.name;
			var $process = __map_reserved[key] != null?_this.getReserved(key):_this.h[key];
			if($process != null) {
				$process.execute(task);
				return;
			}
		}
		task.responsed(new alexa_responses_UnknownIntentResponse(data.request.intent));
	}
};
var alexa_connection_IConnection = function() { };
var alexa_connection_NodeConnection = function(callback) {
	this.callback = callback;
};
alexa_connection_NodeConnection.__interfaces__ = [alexa_connection_IConnection];
alexa_connection_NodeConnection.prototype = {
	connect: function(key,cert) {
		var options = { key : key, cert : cert};
		js_node_Https.createServer(options,$bind(this,this.OnRequest)).listen(443,"0.0.0.0",function() {
			console.log("Started!");
		});
		console.log("Alexa Node Server running at https://0.0.0.0:443/");
	}
	,OnRequest: function(request,response) {
		var _gthis = this;
		if(request.method == "POST") {
			var jsonString = "";
			request.on("data",function(data) {
				jsonString += data;
				console.log("jsonString = " + jsonString);
				_gthis.callback(new alexa_tasks_Task(jsonString,request,response));
			});
		}
	}
};
var alexa_Alexa = function() {
};
alexa_Alexa.connect = function(key,cert) {
	alexa_Alexa.connection.connect(key,cert);
};
alexa_Alexa.addProcess = function(intent,process) {
	alexa_Alexa.processes.add(intent,process);
};
alexa_Alexa.OnAlexaRequest = function(task) {
	alexa_Alexa.processes.execute(task);
	alexa_Alexa.tasks.add(task);
};
var alexa_helloWorld_Main = function() { };
alexa_helloWorld_Main.main = function() {
	alexa_Alexa.connect(js_node_Fs.readFileSync("self_signed/private-key.pem"),js_node_Fs.readFileSync("self_signed/certificate.pem"));
	alexa_Alexa.addProcess("WhatsOnIntent",new alexa_helloWorld_process_HelloWorldProcess());
};
var alexa_helloWorld_intents_Intent = function() {
};
var alexa_process_IProcess = function() { };
var alexa_helloWorld_process_HelloWorldProcess = function() {
};
alexa_helloWorld_process_HelloWorldProcess.__interfaces__ = [alexa_process_IProcess];
alexa_helloWorld_process_HelloWorldProcess.prototype = {
	execute: function(task) {
		var responsePayload = new alexa_payloads_response_ResponsePayload();
		responsePayload.response.outputSpeech.text = "Hello World";
		task.responsed(responsePayload);
	}
};
var alexa_payloads_response_ResponsePayload = function() {
	this.sessionAttributes = new alexa_payloads_response_sessionAttributes_SessionAttributes();
	this.response = new alexa_payloads_response_response_Response();
	this.version = 1.0;
};
var alexa_payloads_response_response_Response = function() {
	this.card = new alexa_payloads_response_response_card_Card();
	this.reprompt = new alexa_payloads_response_response_reprompt_Reprompt();
	this.shouldEndSession = true;
	this.outputSpeech = new alexa_payloads_response_response_outputSpeech_OutputSpeech();
};
var alexa_payloads_response_response_card_Card = function() {
	this.content = "";
	this.title = "";
	this.type = "Simple";
};
var alexa_payloads_response_response_outputSpeech_OutputSpeech = function() {
	this.text = "";
	this.type = "PlainText";
};
var alexa_payloads_response_response_reprompt_Reprompt = function() {
	this.outputSpeech = new alexa_payloads_response_response_outputSpeech_OutputSpeech();
};
var alexa_payloads_response_sessionAttributes_SessionAttributes = function() {
};
var alexa_responses_UnknownIntentResponse = function(intent) {
	alexa_payloads_response_ResponsePayload.call(this);
	if(intent == null) {
		this.response.outputSpeech.text = "There is no process registered with no intent";
	} else {
		this.response.outputSpeech.text = "There is no process registered to the '" + intent.name + "'";
	}
};
alexa_responses_UnknownIntentResponse.__super__ = alexa_payloads_response_ResponsePayload;
alexa_responses_UnknownIntentResponse.prototype = $extend(alexa_payloads_response_ResponsePayload.prototype,{
});
var alexa_tasks_Task = function(data,request,response) {
	this.index = 0;
	this.data = data;
	this.request = request;
	this.response = response;
	this.index = alexa_tasks_Task.indexCount;
	alexa_tasks_Task.indexCount++;
};
alexa_tasks_Task.prototype = {
	responsed: function(responsePayload) {
		if(responsePayload.response.reprompt.outputSpeech.text == "") {
			responsePayload.response.reprompt = null;
		}
		var data = JSON.stringify(responsePayload);
		this.response.writeHead(200,{ 'Content-Type' : "text/plain"});
		this.response.end(data);
	}
};
var haxe_IMap = function() { };
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
};
var haxe_io_Bytes = function() { };
var js_node_Fs = require("fs");
var js_node_Https = require("https");
var js_node_buffer_Buffer = require("buffer").Buffer;
var js_node_tls_SecureContext = function() { };
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
alexa_Alexa.tasks = new alexa_tasks_Tasks();
alexa_Alexa.processes = new alexa_process_Processes();
alexa_Alexa.connection = new alexa_connection_NodeConnection(alexa_Alexa.OnAlexaRequest);
var __map_reserved = {}
alexa_helloWorld_intents_Intent.WhatsOnIntent = "WhatsOnIntent";
alexa_tasks_Task.indexCount = 0;
alexa_helloWorld_Main.main();
})();
